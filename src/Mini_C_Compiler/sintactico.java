
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 16 06:03:30 CST 2015
//----------------------------------------------------

package Mini_C_Compiler;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 16 06:03:30 CST 2015
  */
public class sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\003\000\002\034" +
    "\004\000\002\034\003\000\002\034\003\000\002\036\003" +
    "\000\002\036\004\000\002\035\010\000\002\035\010\000" +
    "\002\035\010\000\002\035\010\000\002\035\010\000\002" +
    "\035\003\000\002\014\004\000\002\014\005\000\002\014" +
    "\002\000\002\014\003\000\002\015\004\000\002\015\005" +
    "\000\002\015\005\000\002\016\003\000\002\016\005\000" +
    "\002\017\003\000\002\017\005\000\002\037\003\000\002" +
    "\037\004\000\002\040\007\000\002\040\010\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\042\006\000\002\042\004\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\011\011\000\002\006\003\000\002\006" +
    "\004\000\002\010\011\000\002\010\006\000\002\012\007" +
    "\000\002\012\004\000\002\021\005\000\002\021\006\000" +
    "\002\021\005\000\002\021\004\000\002\022\003\000\002" +
    "\022\004\000\002\020\007\000\002\020\007\000\002\020" +
    "\011\000\002\020\006\000\002\020\007\000\002\020\004" +
    "\000\002\020\003\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\013\003\000\002\013\005\000\002\025\005\000\002\024" +
    "\004\000\002\024\004\000\002\024\004\000\002\030\004" +
    "\000\002\030\003\000\002\027\003\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\031" +
    "\016\000\002\031\016\000\002\031\016\000\002\031\016" +
    "\000\002\031\016\000\002\031\016\000\002\031\016\000" +
    "\002\031\016\000\002\031\003\000\002\005\003\000\002" +
    "\005\006\000\002\005\005\000\002\005\005\000\002\005" +
    "\010\000\002\005\010\000\002\005\003\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\004\010\000\002\004\010\000" +
    "\002\004\010\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\016\003\014\072\020\073\016\074\015\075" +
    "\012\076\007\001\002\000\016\002\ufffe\072\020\073\016" +
    "\074\015\075\012\076\007\001\002\000\016\002\uffe9\072" +
    "\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\001\002\000\040" +
    "\002\ufffc\003\ufffc\005\ufffc\006\ufffc\014\ufffc\015\ufffc\021" +
    "\ufffc\023\ufffc\061\ufffc\066\ufffc\072\ufffc\073\ufffc\074\ufffc" +
    "\075\ufffc\076\ufffc\001\002\000\004\066\uffe5\001\002\000" +
    "\020\002\ufffd\003\014\072\020\073\016\074\015\075\012" +
    "\076\007\001\002\000\004\002\000\001\002\000\004\066" +
    "\uffe2\001\002\000\004\066\022\001\002\000\040\002\ufff5" +
    "\003\ufff5\005\ufff5\006\ufff5\014\ufff5\015\ufff5\021\ufff5\023" +
    "\ufff5\061\ufff5\066\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5" +
    "\076\ufff5\001\002\000\004\066\uffe1\001\002\000\004\066" +
    "\uffe4\001\002\000\004\002\021\001\002\000\004\066\uffe3" +
    "\001\002\000\004\002\001\001\002\000\012\003\023\033" +
    "\ufff2\054\024\062\025\001\002\000\004\033\ufff1\001\002" +
    "\000\014\055\063\072\067\073\064\074\065\075\061\001" +
    "\002\000\006\063\057\065\056\001\002\000\004\033\027" +
    "\001\002\000\014\060\035\064\034\065\030\067\032\070" +
    "\033\001\002\000\004\052\055\001\002\000\004\052\054" +
    "\001\002\000\004\052\053\001\002\000\004\052\052\001" +
    "\002\000\004\052\051\001\002\000\010\061\042\065\036" +
    "\067\037\001\002\000\006\056\uffed\061\uffed\001\002\000" +
    "\006\056\uffeb\061\uffeb\001\002\000\006\056\046\061\047" +
    "\001\002\000\006\056\043\061\044\001\002\000\004\052" +
    "\ufff0\001\002\000\004\065\045\001\002\000\004\052\uffef" +
    "\001\002\000\006\056\uffec\061\uffec\001\002\000\004\065" +
    "\050\001\002\000\004\052\uffee\001\002\000\006\056\uffea" +
    "\061\uffea\001\002\000\040\002\ufff7\003\ufff7\005\ufff7\006" +
    "\ufff7\014\ufff7\015\ufff7\021\ufff7\023\ufff7\061\ufff7\066\ufff7" +
    "\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\001\002\000" +
    "\040\002\ufff8\003\ufff8\005\ufff8\006\ufff8\014\ufff8\015\ufff8" +
    "\021\ufff8\023\ufff8\061\ufff8\066\ufff8\072\ufff8\073\ufff8\074" +
    "\ufff8\075\ufff8\076\ufff8\001\002\000\040\002\ufffa\003\ufffa" +
    "\005\ufffa\006\ufffa\014\ufffa\015\ufffa\021\ufffa\023\ufffa\061" +
    "\ufffa\066\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa" +
    "\001\002\000\040\002\ufff6\003\ufff6\005\ufff6\006\ufff6\014" +
    "\ufff6\015\ufff6\021\ufff6\023\ufff6\061\ufff6\066\ufff6\072\ufff6" +
    "\073\ufff6\074\ufff6\075\ufff6\076\ufff6\001\002\000\040\002" +
    "\ufff9\003\ufff9\005\ufff9\006\ufff9\014\ufff9\015\ufff9\021\ufff9" +
    "\023\ufff9\061\ufff9\066\ufff9\072\ufff9\073\ufff9\074\ufff9\075" +
    "\ufff9\076\ufff9\001\002\000\004\063\060\001\002\000\004" +
    "\033\ufff4\001\002\000\004\033\ufff3\001\002\000\004\066" +
    "\uffdc\001\002\000\004\066\352\001\002\000\004\060\075" +
    "\001\002\000\004\066\uffde\001\002\000\004\066\uffdb\001" +
    "\002\000\006\055\070\056\071\001\002\000\004\066\uffdd" +
    "\001\002\000\004\060\075\001\002\000\012\072\067\073" +
    "\064\074\065\075\061\001\002\000\004\066\073\001\002" +
    "\000\006\055\uffe0\056\uffe0\001\002\000\016\002\uffe6\072" +
    "\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\001\002\000\036" +
    "\003\014\005\107\006\103\014\100\015\105\021\106\023" +
    "\076\061\110\066\113\072\020\073\016\074\015\075\012" +
    "\076\007\001\002\000\004\054\276\001\002\000\004\066" +
    "\275\001\002\000\014\064\267\065\263\066\264\067\265" +
    "\070\266\001\002\000\004\052\262\001\002\000\022\005" +
    "\uffc7\006\uffc7\014\uffc7\015\uffc7\021\uffc7\023\uffc7\061\uffc7" +
    "\066\uffc7\001\002\000\004\054\255\001\002\000\036\003" +
    "\014\005\107\006\103\014\100\015\105\021\106\023\076" +
    "\061\252\066\113\072\020\073\016\074\015\075\012\076" +
    "\007\001\002\000\004\054\243\001\002\000\004\054\164" +
    "\001\002\000\004\054\155\001\002\000\040\002\uffd0\005" +
    "\uffd0\006\uffd0\014\uffd0\015\uffd0\017\uffd0\021\uffd0\023\uffd0" +
    "\061\uffd0\066\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076" +
    "\uffd0\001\002\000\022\005\uffcf\006\uffcf\014\uffcf\015\uffcf" +
    "\021\uffcf\023\uffcf\061\uffcf\066\uffcf\001\002\000\022\005" +
    "\107\006\103\014\100\015\105\021\106\023\076\061\154" +
    "\066\113\001\002\000\006\033\114\054\115\001\002\000" +
    "\014\064\131\065\130\066\127\067\126\070\133\001\002" +
    "\000\006\055\117\066\116\001\002\000\006\055\uffc1\056" +
    "\uffc1\001\002\000\004\052\125\001\002\000\006\055\121" +
    "\056\122\001\002\000\004\052\124\001\002\000\004\066" +
    "\123\001\002\000\006\055\uffc0\056\uffc0\001\002\000\022" +
    "\005\uffc9\006\uffc9\014\uffc9\015\uffc9\021\uffc9\023\uffc9\061" +
    "\uffc9\066\uffc9\001\002\000\022\005\uffca\006\uffca\014\uffca" +
    "\015\uffca\021\uffca\023\uffca\061\uffca\066\uffca\001\002\000" +
    "\004\052\152\001\002\000\022\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\052\uffb2\065\uffb2\066\uffb2\070\uffb2\001\002\000" +
    "\022\034\uffb4\035\uffb4\036\uffb4\037\uffb4\052\uffb4\065\uffb4" +
    "\066\uffb4\070\uffb4\001\002\000\004\052\151\001\002\000" +
    "\022\005\uffbf\006\uffbf\014\uffbf\015\uffbf\021\uffbf\023\uffbf" +
    "\061\uffbf\066\uffbf\001\002\000\022\034\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\052\uffb3\065\uffb3\066\uffb3\070\uffb3\001\002" +
    "\000\012\052\147\065\130\066\127\070\133\001\002\000" +
    "\022\034\140\035\141\036\137\037\142\052\uffb9\065\uffb9" +
    "\066\uffb9\070\uffb9\001\002\000\012\052\uffba\065\uffba\066" +
    "\uffba\070\uffba\001\002\000\010\065\130\066\127\070\133" +
    "\001\002\000\010\065\130\066\127\070\133\001\002\000" +
    "\010\065\130\066\127\070\133\001\002\000\010\065\130" +
    "\066\127\070\133\001\002\000\022\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\052\uffb5\065\uffb5\066\uffb5\070\uffb5\001\002" +
    "\000\022\034\uffb7\035\uffb7\036\137\037\142\052\uffb7\065" +
    "\uffb7\066\uffb7\070\uffb7\001\002\000\022\034\uffb8\035\uffb8" +
    "\036\137\037\142\052\uffb8\065\uffb8\066\uffb8\070\uffb8\001" +
    "\002\000\022\034\uffb6\035\uffb6\036\uffb6\037\uffb6\052\uffb6" +
    "\065\uffb6\066\uffb6\070\uffb6\001\002\000\022\005\uffbe\006" +
    "\uffbe\014\uffbe\015\uffbe\021\uffbe\023\uffbe\061\uffbe\066\uffbe" +
    "\001\002\000\012\052\uffbb\065\uffbb\066\uffbb\070\uffbb\001" +
    "\002\000\022\005\uffbc\006\uffbc\014\uffbc\015\uffbc\021\uffbc" +
    "\023\uffbc\061\uffbc\066\uffbc\001\002\000\022\005\uffbd\006" +
    "\uffbd\014\uffbd\015\uffbd\021\uffbd\023\uffbd\061\uffbd\066\uffbd" +
    "\001\002\000\022\005\uffce\006\uffce\014\uffce\015\uffce\021" +
    "\uffce\023\uffce\061\uffce\066\uffce\001\002\000\040\002\uffd1" +
    "\005\uffd1\006\uffd1\014\uffd1\015\uffd1\017\uffd1\021\uffd1\023" +
    "\uffd1\061\uffd1\066\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1" +
    "\076\uffd1\001\002\000\004\064\156\001\002\000\004\056" +
    "\157\001\002\000\006\064\161\066\160\001\002\000\004" +
    "\055\163\001\002\000\004\055\162\001\002\000\004\052" +
    "\uff91\001\002\000\004\052\uff92\001\002\000\020\003\173" +
    "\044\175\064\172\065\171\066\170\067\166\070\174\001" +
    "\002\000\010\042\uffa8\043\uffa8\055\uffa8\001\002\000\016" +
    "\040\221\041\216\045\215\046\222\047\223\050\220\001" +
    "\002\000\010\042\202\043\201\055\237\001\002\000\016" +
    "\040\221\041\216\045\215\046\222\047\223\050\220\001" +
    "\002\000\016\040\221\041\216\045\215\046\222\047\223" +
    "\050\220\001\002\000\016\040\221\041\216\045\215\046" +
    "\222\047\223\050\220\001\002\000\010\042\uffa2\043\uffa2" +
    "\055\uffa2\001\002\000\016\040\221\041\216\045\215\046" +
    "\222\047\223\050\220\001\002\000\004\054\176\001\002" +
    "\000\020\003\173\044\175\064\172\065\171\066\170\067" +
    "\166\070\174\001\002\000\010\042\202\043\201\055\200" +
    "\001\002\000\010\042\uffa7\043\uffa7\055\uffa7\001\002\000" +
    "\016\044\211\064\172\065\171\066\170\067\166\070\174" +
    "\001\002\000\016\044\204\064\172\065\171\066\170\067" +
    "\166\070\174\001\002\000\010\042\uffa6\043\uffa6\055\uffa6" +
    "\001\002\000\004\054\205\001\002\000\014\064\172\065" +
    "\171\066\170\067\166\070\174\001\002\000\004\055\207" +
    "\001\002\000\010\042\uffa3\043\uffa3\055\uffa3\001\002\000" +
    "\010\042\uffa5\043\uffa5\055\uffa5\001\002\000\004\054\212" +
    "\001\002\000\014\064\172\065\171\066\170\067\166\070" +
    "\174\001\002\000\004\055\214\001\002\000\010\042\uffa4" +
    "\043\uffa4\055\uffa4\001\002\000\014\064\uff98\065\uff98\066" +
    "\uff98\067\uff98\070\uff98\001\002\000\014\064\uff96\065\uff96" +
    "\066\uff96\067\uff96\070\uff96\001\002\000\004\066\224\001" +
    "\002\000\014\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93" +
    "\001\002\000\014\064\uff95\065\uff95\066\uff95\067\uff95\070" +
    "\uff95\001\002\000\014\064\uff97\065\uff97\066\uff97\067\uff97" +
    "\070\uff97\001\002\000\014\064\uff94\065\uff94\066\uff94\067" +
    "\uff94\070\uff94\001\002\000\010\042\uff99\043\uff99\055\uff99" +
    "\001\002\000\004\066\226\001\002\000\010\042\uff9b\043" +
    "\uff9b\055\uff9b\001\002\000\004\066\230\001\002\000\010" +
    "\042\uff9f\043\uff9f\055\uff9f\001\002\000\014\064\236\065" +
    "\232\066\233\067\234\070\235\001\002\000\010\042\uffa0" +
    "\043\uffa0\055\uffa0\001\002\000\010\042\uffa1\043\uffa1\055" +
    "\uffa1\001\002\000\010\042\uff9e\043\uff9e\055\uff9e\001\002" +
    "\000\010\042\uff9a\043\uff9a\055\uff9a\001\002\000\010\042" +
    "\uff9c\043\uff9c\055\uff9c\001\002\000\004\060\075\001\002" +
    "\000\022\005\uffcc\006\uffcc\014\uffcc\015\uffcc\021\uffcc\023" +
    "\uffcc\061\uffcc\066\uffcc\001\002\000\004\066\242\001\002" +
    "\000\010\042\uff9d\043\uff9d\055\uff9d\001\002\000\020\003" +
    "\173\044\175\064\172\065\171\066\170\067\166\070\174" +
    "\001\002\000\010\042\202\043\201\055\245\001\002\000" +
    "\004\060\075\001\002\000\004\017\247\001\002\000\004" +
    "\060\075\001\002\000\022\005\uffcb\006\uffcb\014\uffcb\015" +
    "\uffcb\021\uffcb\023\uffcb\061\uffcb\066\uffcb\001\002\000\040" +
    "\002\ufffb\003\ufffb\005\ufffb\006\ufffb\014\ufffb\015\ufffb\021" +
    "\ufffb\023\ufffb\061\ufffb\066\ufffb\072\ufffb\073\ufffb\074\ufffb" +
    "\075\ufffb\076\ufffb\001\002\000\040\002\uffd3\005\uffd3\006" +
    "\uffd3\014\uffd3\015\uffd3\017\uffd3\021\uffd3\023\uffd3\061\uffd3" +
    "\066\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\001" +
    "\002\000\022\005\107\006\103\014\100\015\105\021\106" +
    "\023\076\061\254\066\113\001\002\000\040\002\uffd2\005" +
    "\uffd2\006\uffd2\014\uffd2\015\uffd2\017\uffd2\021\uffd2\023\uffd2" +
    "\061\uffd2\066\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076" +
    "\uffd2\001\002\000\004\064\256\001\002\000\004\056\257" +
    "\001\002\000\004\066\260\001\002\000\004\055\261\001" +
    "\002\000\004\052\uff90\001\002\000\022\005\uffc8\006\uffc8" +
    "\014\uffc8\015\uffc8\021\uffc8\023\uffc8\061\uffc8\066\uffc8\001" +
    "\002\000\004\052\274\001\002\000\004\052\273\001\002" +
    "\000\004\052\272\001\002\000\004\052\271\001\002\000" +
    "\004\052\270\001\002\000\022\005\uffc5\006\uffc5\014\uffc5" +
    "\015\uffc5\021\uffc5\023\uffc5\061\uffc5\066\uffc5\001\002\000" +
    "\022\005\uffc2\006\uffc2\014\uffc2\015\uffc2\021\uffc2\023\uffc2" +
    "\061\uffc2\066\uffc2\001\002\000\022\005\uffc3\006\uffc3\014" +
    "\uffc3\015\uffc3\021\uffc3\023\uffc3\061\uffc3\066\uffc3\001\002" +
    "\000\022\005\uffc6\006\uffc6\014\uffc6\015\uffc6\021\uffc6\023" +
    "\uffc6\061\uffc6\066\uffc6\001\002\000\022\005\uffc4\006\uffc4" +
    "\014\uffc4\015\uffc4\021\uffc4\023\uffc4\061\uffc4\066\uffc4\001" +
    "\002\000\010\003\023\033\ufff2\062\025\001\002\000\006" +
    "\003\277\073\300\001\002\000\004\055\uffa9\001\002\000" +
    "\004\066\304\001\002\000\004\055\302\001\002\000\004" +
    "\060\075\001\002\000\022\005\uffcd\006\uffcd\014\uffcd\015" +
    "\uffcd\021\uffcd\023\uffcd\061\uffcd\066\uffcd\001\002\000\004" +
    "\033\305\001\002\000\004\065\306\001\002\000\004\052" +
    "\307\001\002\000\004\066\310\001\002\000\012\040\313" +
    "\041\311\047\314\050\312\001\002\000\004\065\342\001" +
    "\002\000\004\065\333\001\002\000\004\065\324\001\002" +
    "\000\004\065\315\001\002\000\004\052\316\001\002\000" +
    "\004\066\317\001\002\000\006\034\320\035\321\001\002" +
    "\000\004\034\323\001\002\000\004\035\322\001\002\000" +
    "\004\055\uffac\001\002\000\004\055\uffb0\001\002\000\004" +
    "\052\325\001\002\000\004\066\326\001\002\000\006\034" +
    "\327\035\330\001\002\000\004\034\332\001\002\000\004" +
    "\035\331\001\002\000\004\055\uffab\001\002\000\004\055" +
    "\uffaf\001\002\000\004\052\334\001\002\000\004\066\335" +
    "\001\002\000\006\034\336\035\337\001\002\000\004\034" +
    "\341\001\002\000\004\035\340\001\002\000\004\055\uffaa" +
    "\001\002\000\004\055\uffae\001\002\000\004\052\343\001" +
    "\002\000\004\066\344\001\002\000\006\034\345\035\346" +
    "\001\002\000\004\034\350\001\002\000\004\035\347\001" +
    "\002\000\004\055\uffad\001\002\000\004\055\uffb1\001\002" +
    "\000\016\002\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076" +
    "\uffe7\001\002\000\006\055\uffdf\056\uffdf\001\002\000\016" +
    "\002\uffff\072\020\073\016\074\015\075\012\076\007\001" +
    "\002\000\016\002\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8" +
    "\076\uffe8\001\002\000\004\066\356\001\002\000\004\054" +
    "\024\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\020\002\016\034\010\035\005\036\007\037" +
    "\003\040\004\041\012\001\001\000\006\040\353\041\354" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\035\250\037\352\040\004\041\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\025\001\001\000\002\001\001\000\006\042\065\044\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\040\017\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\350\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\073\001\001" +
    "\000\004\044\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\100\020\110\022\111" +
    "\025\101\035\005\036\103\041\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\100\020" +
    "\110\022\252\025\101\035\250\041\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\100\020\152\025\101" +
    "\001\001\000\002\001\001\000\012\024\131\026\134\027" +
    "\135\030\133\001\001\000\004\013\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\134\027\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\145\001\001\000\004" +
    "\026\144\001\001\000\004\026\143\001\001\000\004\026" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\166\032\164\001" +
    "\001\000\002\001\001\000\004\033\240\001\001\000\002" +
    "\001\001\000\004\033\230\001\001\000\004\033\226\001" +
    "\001\000\004\033\224\001\001\000\002\001\001\000\004" +
    "\033\216\001\001\000\002\001\001\000\006\005\176\032" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\207\001\001\000\004\032\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\243\032\164\001\001\000\002\001\001" +
    "\000\004\021\245\001\001\000\002\001\001\000\004\021" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\100\020\152\025\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\025\001\001\000\004\031\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\302\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\353\041\354\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public node padre;
    public boolean validSintax = true;

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
 validSintax = false;
        System.out.print(" Error sintáctico en la línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido. " );
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
 validSintax = false;
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido. ");
    }
    
    public void setPadre(node pa){
        padre = pa;        
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintactico$actions {


 

  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ENDVOODOO ::= endvoodoo 
            {
              node RESULT =null;
		RESULT = new node("endvoodoo") ; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ENDVOODOO",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IOFUNCTIONS ::= scanf parizq stringval tseparator iden parder 
            {
              node RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String sf = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int pvleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String pv = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		   node nodo = new node(sf,sfright+1,sfleft);
                                                                          nodo.children.add(new node(pv,pvright+1,pvleft));
                                                                          nodo.children.add(new node(id,idright+1,idleft));
                                                                          /*if()
                                                                          {
                                                                            System.out.println("Error en la línea: " + idright+1 + " columna: " + idleft + ", se esperaba paso de parámetros por referencia en la función 'scanf'");
                                                                          }*/
                                                                          RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IOFUNCTIONS",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IOFUNCTIONS ::= printf parizq stringval tseparator stringval parder 
            {
              node RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String pf = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int pvleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String pv = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		   node nodo = new node(pf,pfright+1,pfleft);
                                                                          nodo.children.add(new node(pv,pvright+1,pvleft));
                                                                          nodo.children.add(new node(id,idright+1,idleft));
                                                                          RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IOFUNCTIONS",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IOFUNCTIONS ::= printf parizq stringval tseparator iden parder 
            {
              node RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String pf = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int pvleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String pv = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		   node nodo = new node(pf,pfright+1,pfleft);
                                                                          nodo.children.add(new node(pv,pvright+1,pvleft));
                                                                          nodo.children.add(new node(id,idright+1,idleft));
                                                                          RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IOFUNCTIONS",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // COMPARISONOPERATORS ::= greaterorequal 
            {
              node RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new node(">=",id1right+1,id1left); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISONOPERATORS",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // COMPARISONOPERATORS ::= lessorequal 
            {
              node RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new node("<=",id1right+1,id1left); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISONOPERATORS",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // COMPARISONOPERATORS ::= greater 
            {
              node RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new node(">",id1right+1,id1left); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISONOPERATORS",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // COMPARISONOPERATORS ::= less 
            {
              node RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new node("<",id1right+1,id1left); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISONOPERATORS",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // COMPARISONOPERATORS ::= tnotequal 
            {
              node RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new node("!=",id1right+1,id1left); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISONOPERATORS",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // COMPARISONOPERATORS ::= tequal 
            {
              node RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new node("==",id1right+1,id1left); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISONOPERATORS",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // COMPARISON ::= floatval COMPARISONOPERATORS iden 
            {
              node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node i = new node(id, idright+1, idleft);node v = new node(f, fright+1, fleft);v.type = "float"; i.variable = true; c.children.add(v); c.children.add(i);RESULT = c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON",24, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COMPARISON ::= iden COMPARISONOPERATORS floatval 
            {
              node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node i = new node(id, idright+1, idleft);node v = new node(f, fright+1, fleft);v.type = "float"; i.variable = true; c.children.add(i);c.children.add(v);RESULT = c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON",24, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // COMPARISON ::= stringval COMPARISONOPERATORS iden 
            {
              node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node i = new node(id, idright+1, idleft);node v = new node(s, sright+1, sleft);v.type = "string"; i.variable = true; c.children.add(v); c.children.add(i); RESULT = c;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON",24, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // COMPARISON ::= iden COMPARISONOPERATORS stringval 
            {
              node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node i = new node(id, idright+1, idleft);node v = new node(s, sright+1, sleft);v.type = "string"; i.variable = true; c.children.add(i);c.children.add(v); RESULT = c;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON",24, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // COMPARISON ::= characterval COMPARISONOPERATORS iden 
            {
              node RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node i = new node(id, idright+1, idleft);node v = new node(ch, chright+1, chleft);v.type = "char"; i.variable = true; c.children.add(v); c.children.add(i); RESULT = c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON",24, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // COMPARISON ::= iden COMPARISONOPERATORS characterval 
            {
              node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int chleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node i = new node(id, idright+1, idleft);node v = new node(ch, chright+1, chleft);v.type = "char"; i.variable = true; c.children.add(i);c.children.add(v); RESULT = c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON",24, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // COMPARISON ::= numero COMPARISONOPERATORS iden 
            {
              node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node i = new node(id, idright+1, idleft);node v = new node(n, nright+1, nleft); v.type = "int"; i.variable = true; c.children.add(v); c.children.add(i); RESULT = c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON",24, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // COMPARISON ::= iden COMPARISONOPERATORS numero 
            {
              node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node i = new node(id, idright+1, idleft);node v = new node(n, nright+1, nleft); v.type = "int"; i.variable = true; c.children.add(i);c.children.add(v); RESULT = c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON",24, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // COMPARISON ::= iden COMPARISONOPERATORS iden 
            {
              node RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node i = new node(id1,id1right+1,id1left);node v = new node(id2,id2right+1,id2left); i.variable = true; v.variable = true; c.children.add(i);c.children.add(v); RESULT = c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMPARISON",24, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BOOLEANEXP ::= error 
            {
              node RESULT =null;
		RESULT = new node("Expresión booleana inválida");System.out.println("Expresión booleana inválida");
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANEXP",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BOOLEANEXP ::= BOOLEANEXP tand tnot parizq COMPARISON parder 
            {
              node RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		node be = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 node nodo = new node(a,aright+1,aleft);
                                                                                          node nodoNot = new node(n,nright+1,nleft);
                                                                                          nodoNot.children.add(c);
                                                                                        nodo.children.add(be);
                                                                                        nodo.children.add(nodoNot);
                                                                                        RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANEXP",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BOOLEANEXP ::= BOOLEANEXP tor tnot parizq COMPARISON parder 
            {
              node RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		node be = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 node nodo = new node(o,oright+1,oleft);
                                                                                          node nodoNot = new node(n,nright+1,nleft);
                                                                                          nodoNot.children.add(c);
                                                                                        nodo.children.add(be);
                                                                                        nodo.children.add(nodoNot);
                                                                                        RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANEXP",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BOOLEANEXP ::= BOOLEANEXP tor COMPARISON 
            {
              node RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node be = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node(o,oright+1,oleft);
                                                                                        nodo.children.add(be);
                                                                                        nodo.children.add(c);
                                                                                        RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANEXP",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BOOLEANEXP ::= BOOLEANEXP tand COMPARISON 
            {
              node RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node be = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                                                                                        node nodo = new node(a,aright+1,aleft);
                                                                                        nodo.children.add(be);
                                                                                        nodo.children.add(c);
                                                                                        RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANEXP",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BOOLEANEXP ::= tnot parizq BOOLEANEXP parder 
            {
              node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                                                                                        node nodo = new node(n,nright+1,nleft);
                                                                                        nodo.children.add(c);
                                                                                        RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANEXP",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BOOLEANEXP ::= COMPARISON 
            {
              node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = c;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANEXP",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FORPARAMS ::= error 
            {
              node RESULT =null;
		 node error = new node("parametro_inválido");System.out.println("Parametros de bloque For inválidos"); RESULT = error;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORPARAMS",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FORPARAMS ::= tinteger iden assign numero coma iden greaterorequal numero coma iden menos menos 
            {
              node RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).right;
		String ti = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int geleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int geright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String ge = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int men1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int men1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String men1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int men2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int men2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String men2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node pa = new node("forParams");
                                                                                                                        node t = new node(ti);
                                                                                                                        node i = new node(id, idright+1, idleft);
                                                                                                                        i.variable = true;
                                                                                                                        node a = new node(as, asright+1, asleft);
                                                                                                                        node num1 = new node(n1, n1right+1, n1left);
                                                                                                                        node i1 = new node(id1, id1right+1, id1left);
                                                                                                                        i1.variable = true;
                                                                                                                        node goe = new node(ge, geright+1, geleft);
                                                                                                                        node num2 = new node(n2, n2right+1, n2left);
                                                                                                                        node i2 = new node(id2, id2right+1, id2left);
                                                                                                                        i2.variable = true;
                                                                                                                        node m1 = new node("--");
                                                                                                                        //node m2 = new node(men2);
                                                                                                                        pa.children.add(t);
                                                                                                                        pa.children.add(i);
                                                                                                                        pa.children.add(a);
                                                                                                                        pa.children.add(num1);
                                                                                                                        pa.children.add(i1);
                                                                                                                        pa.children.add(goe);
                                                                                                                        pa.children.add(num2);
                                                                                                                        pa.children.add(i2);
                                                                                                                        pa.children.add(m1);
                                                                                                                        //pa.children.add(m2);
                                                                                                                        RESULT = pa;
                                                                                                                       
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORPARAMS",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FORPARAMS ::= tinteger iden assign numero coma iden greater numero coma iden menos menos 
            {
              node RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).right;
		String ti = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int geleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int geright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String ge = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int men1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int men1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String men1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int men2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int men2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String men2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node pa = new node("forParams");
                                                                                                                        node t = new node(ti);
                                                                                                                        node i = new node(id, idright+1, idleft);
                                                                                                                        i.variable = true;
                                                                                                                        node a = new node(as, asright+1, asleft);
                                                                                                                        node num1 = new node(n1, n1right+1, n1left);
                                                                                                                        node i1 = new node(id1, id1right+1, id1left);
                                                                                                                        i1.variable = true;
                                                                                                                        node goe = new node(ge, geright+1, geleft);
                                                                                                                        node num2 = new node(n2, n2right+1, n2left);
                                                                                                                        node i2 = new node(id2, id2right+1, id2left);
                                                                                                                        i2.variable = true;
                                                                                                                        node m1 = new node("--");
                                                                                                                        //node m2 = new node(men2);
                                                                                                                        pa.children.add(t);
                                                                                                                        pa.children.add(i);
                                                                                                                        pa.children.add(a);
                                                                                                                        pa.children.add(num1);
                                                                                                                        pa.children.add(i1);
                                                                                                                        pa.children.add(goe);
                                                                                                                        pa.children.add(num2);
                                                                                                                        pa.children.add(i2);
                                                                                                                        pa.children.add(m1);
                                                                                                                        //pa.children.add(m2);
                                                                                                                        RESULT = pa; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORPARAMS",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FORPARAMS ::= tinteger iden assign numero coma iden lessorequal numero coma iden menos menos 
            {
              node RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).right;
		String ti = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int geleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int geright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String ge = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int men1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int men1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String men1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int men2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int men2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String men2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node pa = new node("forParams");
                                                                                                                        node t = new node(ti);
                                                                                                                        node i = new node(id, idright+1, idleft);
                                                                                                                        i.variable = true;
                                                                                                                        node a = new node(as, asright+1, asleft);
                                                                                                                        node num1 = new node(n1, n1right+1, n1left);
                                                                                                                        node i1 = new node(id1, id1right+1, id1left);
                                                                                                                        i1.variable = true;
                                                                                                                        node goe = new node(ge, geright+1, geleft);
                                                                                                                        node num2 = new node(n2, n2right+1, n2left);
                                                                                                                        node i2 = new node(id2, id2right+1, id2left);
                                                                                                                        i2.variable = true;
                                                                                                                        node m1 = new node("--");
                                                                                                                        //node m2 = new node(men2);
                                                                                                                        pa.children.add(t);
                                                                                                                        pa.children.add(i);
                                                                                                                        pa.children.add(a);
                                                                                                                        pa.children.add(num1);
                                                                                                                        pa.children.add(i1);
                                                                                                                        pa.children.add(goe);
                                                                                                                        pa.children.add(num2);
                                                                                                                        pa.children.add(i2);
                                                                                                                        pa.children.add(m1);
                                                                                                                       // pa.children.add(m2);
                                                                                                                        RESULT = pa;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORPARAMS",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FORPARAMS ::= tinteger iden assign numero coma iden less numero coma iden menos menos 
            {
              node RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).right;
		String ti = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int geleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int geright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String ge = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int men1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int men1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String men1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int men2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int men2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String men2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node pa = new node("forParams");
                                                                                                                        node t = new node(ti);
                                                                                                                        node i = new node(id, idright+1, idleft);
                                                                                                                        i.variable = true;
                                                                                                                        node a = new node(as, asright+1, asleft);
                                                                                                                        node num1 = new node(n1, n1right+1, n1left);
                                                                                                                        node i1 = new node(id1, id1right+1, id1left);
                                                                                                                        i1.variable = true;
                                                                                                                        node goe = new node(ge, geright+1, geleft);
                                                                                                                        node num2 = new node(n2, n2right+1, n2left);
                                                                                                                        node i2 = new node(id2, id2right+1, id2left);
                                                                                                                        i2.variable = true;
                                                                                                                        node m1 = new node("--");
                                                                                                                        //node m2 = new node(men2);
                                                                                                                        pa.children.add(t);
                                                                                                                        pa.children.add(i);
                                                                                                                        pa.children.add(a);
                                                                                                                        pa.children.add(num1);
                                                                                                                        pa.children.add(i1);
                                                                                                                        pa.children.add(goe);
                                                                                                                        pa.children.add(num2);
                                                                                                                        pa.children.add(i2);
                                                                                                                        pa.children.add(m1);
                                                                                                                        //pa.children.add(m2);
                                                                                                                        RESULT = pa; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORPARAMS",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FORPARAMS ::= tinteger iden assign numero coma iden greaterorequal numero coma iden mas mas 
            {
              node RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).right;
		String ti = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int geleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int geright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String ge = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int men1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int men1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String men1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int men2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int men2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String men2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node pa = new node("forParams");
                                                                                                                        node t = new node(ti);
                                                                                                                        node i = new node(id, idright+1, idleft);
                                                                                                                        i.variable = true;
                                                                                                                        node a = new node(as, asright+1, asleft);
                                                                                                                        node num1 = new node(n1, n1right+1, n1left);
                                                                                                                        node i1 = new node(id1, id1right+1, id1left);
                                                                                                                        i1.variable = true;
                                                                                                                        node goe = new node(ge, geright+1, geleft);
                                                                                                                        node num2 = new node(n2, n2right+1, n2left);
                                                                                                                        node i2 = new node(id2, id2right+1, id2left);
                                                                                                                        i2.variable = true;
                                                                                                                        node m1 = new node("++");
                                                                                                                        //node m2 = new node(men2);
                                                                                                                        pa.children.add(t);
                                                                                                                        pa.children.add(i);
                                                                                                                        pa.children.add(a);
                                                                                                                        pa.children.add(num1);
                                                                                                                        pa.children.add(i1);
                                                                                                                        pa.children.add(goe);
                                                                                                                        pa.children.add(num2);
                                                                                                                        pa.children.add(i2);
                                                                                                                        pa.children.add(m1);
                                                                                                                       // pa.children.add(m2);
                                                                                                                        RESULT = pa;System.out.println("Parametros de un for."); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORPARAMS",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FORPARAMS ::= tinteger iden assign numero coma iden greater numero coma iden mas mas 
            {
              node RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).right;
		String ti = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int geleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int geright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String ge = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int men1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int men1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String men1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int men2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int men2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String men2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node pa = new node("forParams");
                                                                                                                        node t = new node(ti);
                                                                                                                        node i = new node(id, idright+1, idleft);
                                                                                                                        i.variable = true;
                                                                                                                        node a = new node(as, asright+1, asleft);
                                                                                                                        node num1 = new node(n1, n1right+1, n1left);
                                                                                                                        node i1 = new node(id1, id1right+1, id1left);
                                                                                                                        i1.variable = true;
                                                                                                                        node goe = new node(ge, geright+1, geleft);
                                                                                                                        node num2 = new node(n2, n2right+1, n2left);
                                                                                                                        node i2 = new node(id2, id2right+1, id2left);
                                                                                                                        i2.variable = true;
                                                                                                                        node m1 = new node("++");
                                                                                                                        //node m2 = new node(men2);
                                                                                                                        pa.children.add(t);
                                                                                                                        pa.children.add(i);
                                                                                                                        pa.children.add(a);
                                                                                                                        pa.children.add(num1);
                                                                                                                        pa.children.add(i1);
                                                                                                                        pa.children.add(goe);
                                                                                                                        pa.children.add(num2);
                                                                                                                        pa.children.add(i2);
                                                                                                                        pa.children.add(m1);
                                                                                                                       // pa.children.add(m2);
                                                                                                                        RESULT = pa; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORPARAMS",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FORPARAMS ::= tinteger iden assign numero coma iden lessorequal numero coma iden mas mas 
            {
              node RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).right;
		String ti = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int geleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int geright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String ge = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int men1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int men1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String men1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int men2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int men2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String men2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node pa = new node("forParams");
                                                                                                                        node t = new node(ti);
                                                                                                                        node i = new node(id, idright+1, idleft);
                                                                                                                        i.variable = true;
                                                                                                                        node a = new node(as, asright+1, asleft);
                                                                                                                        node num1 = new node(n1, n1right+1, n1left);
                                                                                                                        node i1 = new node(id1, id1right+1, id1left);
                                                                                                                        i1.variable = true;
                                                                                                                        node goe = new node(ge, geright+1, geleft);
                                                                                                                        node num2 = new node(n2, n2right+1, n2left);
                                                                                                                        node i2 = new node(id2, id2right+1, id2left);
                                                                                                                        i2.variable = true;
                                                                                                                        node m1 = new node("++");
                                                                                                                        //node m2 = new node(men2);
                                                                                                                        pa.children.add(t);
                                                                                                                        pa.children.add(i);
                                                                                                                        pa.children.add(a);
                                                                                                                        pa.children.add(num1);
                                                                                                                        pa.children.add(i1);
                                                                                                                        pa.children.add(goe);
                                                                                                                        pa.children.add(num2);
                                                                                                                        pa.children.add(i2);
                                                                                                                        pa.children.add(m1);
                                                                                                                       // pa.children.add(m2);
                                                                                                                        RESULT = pa; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORPARAMS",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FORPARAMS ::= tinteger iden assign numero coma iden less numero coma iden mas mas 
            {
              node RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).right;
		String ti = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int geleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int geright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String ge = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int men1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int men1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String men1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int men2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int men2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String men2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node pa = new node("forParams");
                                                                                                                        node t = new node(ti);
                                                                                                                        node i = new node(id, idright+1, idleft);
                                                                                                                        i.variable = true;                                   
                                                                                                                        node a = new node(as, asright+1, asleft);
                                                                                                                        node num1 = new node(n1, n1right+1, n1left);
                                                                                                                        node i1 = new node(id1, id1right+1, id1left);
                                                                                                                        i1.variable = true;
                                                                                                                        node goe = new node(ge, geright+1, geleft);
                                                                                                                        node num2 = new node(n2, n2right+1, n2left);
                                                                                                                        node i2 = new node(id2, id2right+1, id2left);
                                                                                                                        i2.variable = true;
                                                                                                                        node m1 = new node("++");
                                                                                                                        //node m2 = new node(men2);
                                                                                                                        pa.children.add(t);
                                                                                                                        pa.children.add(i);
                                                                                                                        pa.children.add(a);
                                                                                                                        pa.children.add(num1);
                                                                                                                        pa.children.add(i1);
                                                                                                                        pa.children.add(goe);
                                                                                                                        pa.children.add(num2);
                                                                                                                        pa.children.add(i2);
                                                                                                                        pa.children.add(m1);
                                                                                                                       // pa.children.add(m2);
                                                                                                                        RESULT = pa; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORPARAMS",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ARITHMETIC ::= iden 
            {
              node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node(v, vright+1, vleft);
                                                                nodo.variable = true;
                                                                RESULT = nodo;
                                                                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITHMETIC",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ARITHMETIC ::= floatval 
            {
              node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node(v, vright+1, vleft);
                                                                nodo.type = "float";
                                                                RESULT = nodo;
                                                                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITHMETIC",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ARITHMETIC ::= numero 
            {
              node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node(v, vright+1, vleft);
                                                                nodo.type = "int";
                                                                RESULT = nodo;
                                                                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITHMETIC",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ARITHMETIC ::= ARITHMETIC division ARITHMETIC 
            {
              node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node v1 = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node v2 = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node(op);
                                                                nodo.children.add(v1);
                                                                nodo.children.add(v2);
                                                                RESULT = nodo;
                                                                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITHMETIC",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ARITHMETIC ::= ARITHMETIC por ARITHMETIC 
            {
              node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node v1 = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node v2 = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node(op);
                                                                nodo.children.add(v1);
                                                                nodo.children.add(v2);
                                                                RESULT = nodo;
                                                                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITHMETIC",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARITHMETIC ::= ARITHMETIC menos ARITHMETIC 
            {
              node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node v1 = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node v2 = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node(op);
                                                                nodo.children.add(v1);
                                                                nodo.children.add(v2);
                                                                RESULT = nodo;
                                                                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITHMETIC",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARITHMETIC ::= ARITHMETIC mas ARITHMETIC 
            {
              node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node v1 = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node v2 = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node(op);
                                                                nodo.children.add(v1);
                                                                nodo.children.add(v2);
                                                                RESULT = nodo;
                                                                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITHMETIC",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARITHMETICP ::= ARITHMETIC 
            {
              node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node v = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = v;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITHMETICP",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARITHMETICS ::= ARITHMETICP 
            {
              node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node v = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = v;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARITHMETICS ::= ARITHMETICS ARITHMETICP 
            {
              node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node v = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node vp = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node("aritmetico");
                                                                nodo.children.add(v);
                                                                nodo.children.add(vp);
                                                                RESULT = nodo;
                                                                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASSIGN ::= stringval coma 
            {
              node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 node nodo = new node(v, vright+1, vleft);nodo.type = "string";RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGN",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASSIGN ::= characterval coma 
            {
              node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 node nodo = new node(v, vright+1, vleft);nodo.type = "char";RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGN",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASSIGN ::= ARITHMETICS coma 
            {
              node RESULT =null;
		int armsleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int armsright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node arms = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = arms;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGN",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASSIGNP ::= iden assign ASSIGN 
            {
              node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int as1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int as1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String as1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int as2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int as2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node as2 = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node(as1, idright+1, idleft);
                                                                 node tmp = new node(id, idright+1, idleft);
                                                                 tmp.variable = true;
                                                                 nodo.children.add(tmp);
                                                                 nodo.children.add(as2);
                                                                 
                                                                 RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGNP",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCTIONCALLPARAMS ::= FUNCTIONCALLPARAMS tseparator iden 
            {
              node RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node fp = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node("callParam");
                                                              node nodotmp = new node(id, idright+1, idleft);
                                                              nodotmp.variable = true;
                                                              nodo.children.add(nodotmp);
                                                              
                                                              fp.children.add(nodo);
                                                              RESULT = fp; 
                                                            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FUNCTIONCALLPARAMS",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNCTIONCALLPARAMS ::= iden 
            {
              node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node("functionCallParams");
                                                              node nodotmp = new node("callParam");
                                                              node tmpParam = new node(id, idright+1, idleft); 
                                                              tmpParam.variable = true;
                                                              nodotmp.children.add(tmpParam);
                                                              
                                                              nodo.children.add(nodotmp);
                                                              RESULT = nodo;                                                              
                                                            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FUNCTIONCALLPARAMS",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOCK ::= treturn floatval coma 
            {
              node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int rvleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String rv = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 node nodo = new node("return");                                                                                        
                                                                        nodo.children.add(new node(rv, rvright+1, rvleft, "float")); 
                                                                        RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCK",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOCK ::= treturn characterval coma 
            {
              node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int rvleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String rv = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 node nodo = new node("return");                                                                                        
                                                                        nodo.children.add(new node(rv, rvright+1, rvleft, "char")); 
                                                                        RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCK",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOCK ::= treturn numero coma 
            {
              node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int rvleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String rv = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 node nodo = new node("return");                                                                                        
                                                                        nodo.children.add(new node(rv, rvright+1, rvleft, "int")); 
                                                                        RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCK",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOCK ::= treturn stringval coma 
            {
              node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int rvleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String rv = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 node nodo = new node("return");                                                                                        
                                                                        nodo.children.add(new node(rv, rvright+1, rvleft, "string")); 
                                                                        RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCK",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOCK ::= treturn iden coma 
            {
              node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int rvleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String rv = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 node nodo = new node("return");                                                                                        
                                                                        nodo.children.add(new node(rv, rvright+1, rvleft, "iden")); 
                                                                        RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCK",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOCK ::= ASSIGNP 
            {
              node RESULT =null;
		int aspleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aspright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node asp = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = asp; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCK",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOCK ::= IOFUNCTIONS coma 
            {
              node RESULT =null;
		int iofleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int iofright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node iof = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 RESULT = iof; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCK",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOCK ::= iden parizq FUNCTIONCALLPARAMS parder coma 
            {
              node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String pd = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 node nodo = new node("functionCall", idright+1, idleft);
                                                                              nodo.children.add(new node(id));                                                                              
                                                                              nodo.children.add(c);RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCK",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOCK ::= iden parizq parder coma 
            {
              node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String pd = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 node nodo = new node("functionCall", idright+1, idleft);
                                                                              nodo.children.add(new node(id));
                                                                              nodo.children.add(new node("functionCallParams"));
                                                                              RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCK",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOCK ::= tif parizq BOOLEANEXP parder BLOCKS telse BLOCKS 
            {
              node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String pd = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node b1 = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node b2 = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node("if");                                                                                        
                                                                                        nodo.children.add(c);                                                                                        
                                                                                        nodo.children.add(b1);
                                                                                        nodo.children.add(new node(e));
                                                                                        nodo.children.add(b2);
                                                                                        nodo.children.add(new node("endif"));
                                                                                      //  nodo.children.add(new node(ei));
                                                                                        RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCK",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOCK ::= twhile parizq BOOLEANEXP parder BLOCKS 
            {
              node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String pd = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node b1 = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node("while");                                                                                        
                                                                                        nodo.children.add(c);                                                                                        
                                                                                        nodo.children.add(b1);
                                                                                        nodo.children.add(new node("endwhile"));
                                                                                       // nodo.children.add(new node(ew));                                                                                        
                                                                                        RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCK",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOCK ::= tfor parizq FORPARAMS parder BLOCKS 
            {
              node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node c = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String pd = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node b1 = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node("for");                                                                                        
                                                                                        nodo.children.add(c);                                                                                        
                                                                                        nodo.children.add(b1);
                                                                                        nodo.children.add(new node("endfor"));
                                                                                        //nodo.children.add(new node(ef));                                                                                        
                                                                                        RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCK",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOCKP ::= BLOCKP BLOCK 
            {
              node RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node bp = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node b = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		bp.children.add(b);
                                                                                   RESULT=bp;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCKP",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOCKP ::= BLOCK 
            {
              node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node b = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node("bloque"); 
                                                                                  nodo.children.add(b); 
                                                                                   RESULT = nodo ;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCKP",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOCKS ::= llaveizq llaveder 
            {
              node RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCKS",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOCKS ::= llaveizq BLOCKP llaveder 
            {
              node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node b = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		node nodo = new node("bloque"); 
                                                                                  nodo.children.add(b); 
                                                                                   RESULT = nodo ;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCKS",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOCKS ::= llaveizq DECLARACIONES BLOCKP llaveder 
            {
              node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node d = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node bs = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		node nodo = new node("bloque");
                                                                                   nodo.children.add(d);
                                                                                   //nodo.children.add(b);                                                                                   
                                                                                   bs.children.add(nodo);                                                                                   
                                                                                   RESULT=bs;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCKS",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOCKS ::= llaveizq DECLARACIONES llaveder 
            {
              node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node d = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		node nodo = new node("bloque");
                                                                                   nodo.children.add(d);
                                                                                   
                                                                                   RESULT = nodo ;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BLOCKS",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DEFAULT ::= tdefault tenddefault 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String ed = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node(t);nodo.children.add(new node(t));nodo.children.add(new node(ed));RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DEFAULT ::= tdefault parizq BLOCKS parder tenddefault 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node b = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String pd = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String ed = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node("default");
                                                                                     nodo.children.add(new node(t));                                                                                     
                                                                                     nodo.children.add(b);                                                                                     
                                                                                     nodo.children.add(new node(ed));
                                                                                     RESULT = nodo;
                                                                                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPTION ::= toption numero dospuntos tendoption 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String ed = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node("option");
                                                                                        nodo.children.add(new node(t));
                                                                                        nodo.children.add(new node(n, nright+1, nleft));
                                                                                        nodo.children.add(new node(d));
                                                                                        nodo.children.add(new node(ed));
                                                                                        RESULT = nodo;
                                                                                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPTION",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPTION ::= toption numero dospuntos parizq BLOCKS parder tendoption 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node b = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String pd = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String et = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node("option");
                                                                                        nodo.children.add(new node(t));
                                                                                        nodo.children.add(new node(n, nright+1, nleft));
                                                                                        nodo.children.add(new node(d));                                                                                        
                                                                                        nodo.children.add(b);                                                                                        
                                                                                        nodo.children.add(new node(et));                                                                                        
                                                                                        RESULT = nodo;                                                                                         
                                                                                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPTION",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPTIONS ::= OPTION OPTIONS 
            {
              node RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node o = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node os = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node("opción");
                                         nodo.children.add(o);
                                         nodo.children.add(os);
                                         RESULT = nodo;
                                         
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPTIONS",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPTIONS ::= OPTION 
            {
              node RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node o = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node("opción");
                                         nodo.children.add(o);
                                         RESULT = nodo;
                                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPTIONS",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SELECT ::= tselect parizq iden parder OPTIONS DEFAULT tendselect 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String pd = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node os = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node d = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String et = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node("select");
                                                                                                    nodo.children.add(new node(t));                                                                                        
                                                                                                    nodo.children.add(new node(id, idright+1, idleft));                                                                                        
                                                                                                    nodo.children.add(os);
                                                                                                    nodo.children.add(d);
                                                                                                    nodo.children.add(new node(et));
                                                                                                    RESULT = nodo;
                                                                                                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SELECT",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMTYPES ::= tfloat 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = new node(t, tright+1, tleft);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PARAMTYPES",34, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMTYPES ::= tstring 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = new node(t, tright+1, tleft);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PARAMTYPES",34, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMTYPES ::= tchar 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = new node(t, tright+1, tleft);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PARAMTYPES",34, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMTYPES ::= tinteger 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = new node(t, tright+1, tleft);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PARAMTYPES",34, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCTIONDECLARATIONPARAMS ::= PARAMTYPES iden 
            {
              node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node p = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node("functionParams");
                                                                  node nodotmp = new node("param");
                                                                  nodotmp.children.add(p);
                                                                  nodotmp.children.add(new node(id, idright+1, idleft));
                                                                  nodo.children.add(nodotmp);
                                                                  RESULT = nodo;
                                                                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FUNCTIONDECLARATIONPARAMS",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCTIONDECLARATIONPARAMS ::= FUNCTIONDECLARATIONPARAMS tseparator PARAMTYPES iden 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		node t = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node p = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node("param");
                                                                nodo.children.add(p);
                                                                nodo.children.add(new node(id, idright+1, idleft));
                                                                t.children.add(nodo);
                                                                RESULT = t;
                                                                  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FUNCTIONDECLARATIONPARAMS",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RETURNTYPES ::= tfloat 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = new node(t, tright+1, tleft);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("RETURNTYPES",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RETURNTYPES ::= tstring 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = new node(t, tright+1, tleft);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("RETURNTYPES",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RETURNTYPES ::= tchar 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = new node(t, tright+1, tleft);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("RETURNTYPES",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RETURNTYPES ::= tinteger 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = new node(t, tright+1, tleft);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("RETURNTYPES",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RETURNTYPES ::= tvoid 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = new node(t, tright+1, tleft);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("RETURNTYPES",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SPELL ::= RETURNTYPES iden parizq FUNCTIONDECLARATIONPARAMS parder BLOCKS 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		node t = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node f = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String pd = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node b = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node("function");
                                                                                                                            nodo.children.add(t);
                                                                                                                            nodo.children.add(new node(id, idright+1, idleft));                                                                                                    
                                                                                                                            nodo.children.add(f);                                                                                                    
                                                                                                                            nodo.children.add(b);
                                                                                                                            
                                                                                                                            nodo.returnType = t.sym;
                                                                                                                            nodo.params = f;
                                                                                                                            //node retvalue = new node(retid, idright+1, idleft);
                                                                                                                            //retvalue.variable = true;
                                                                                                                            //nodo.children.add(retvalue);
                                                                                                                            //nodo.children.add(new node(es));
                                                                                                                            RESULT = nodo;
                                                                                                                            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SPELL",30, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SPELL ::= RETURNTYPES iden parizq parder BLOCKS 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		node t = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String pd = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node b = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node("function");
                                                                                                    nodo.children.add(t);
                                                                                                    nodo.children.add(new node(id, idright+1, idleft));
                                                                                                    nodo.children.add(b);
                                                                                                    
                                                                                                    nodo.returnType = t.sym;
                                                                                                    //node retvalue = new node(retid, idright+1, idleft);
                                                                                                    //retvalue.variable = true;
                                                                                                    //nodo.children.add(retvalue);
                                                                                                    //nodo.children.add(new node(es));
                                                                                                    RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SPELL",30, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SPELLS ::= SPELLS SPELL 
            {
              node RESULT =null;
		int osleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node os = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node o = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 os.children.add(o);
                                                RESULT = os;
                                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SPELLS",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SPELLS ::= SPELL 
            {
              node RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node o = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node("functions");
                                           nodo.children.add(o);
                                           RESULT = nodo; 
                                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SPELLS",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LETRAS ::= LETRAS tseparator numero 
            {
              node RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node ns = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node(n, nright+1, nleft);
                                                
                                                ns.children.add(nodo);
                                               
                                                RESULT = ns;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LETRAS",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LETRAS ::= characterval 
            {
              node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node("arrayValues");
                                                nodo.children.add(new node(n, nright+1, nleft, "char,array"));
                                                RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LETRAS",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NUMEROS ::= NUMEROS tseparator numero 
            {
              node RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		node ns = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node(n, nright+1, nleft, "int,array");
                                                
                                                ns.children.add(nodo);
                                               
                                                RESULT = ns;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NUMEROS ::= numero 
            {
              node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		node nodo = new node("arrayValues");
                                                nodo.children.add(new node(n, nright+1, nleft));
                                                RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARRAYVAL ::= llaveizq LETRAS llaveder 
            {
              node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node n = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = n;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARRAYVAL ::= llaveizq NUMEROS llaveder 
            {
              node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node n = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = n;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARRAYVAL ::= llaveizq llaveder 
            {
              node RESULT =null;
		RESULT = new node("empty_array");
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARRAYPARAMS ::= error 
            {
              node RESULT =null;
		RESULT = new node("error"); System.out.println("Declaración inválida. ");
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARRAYPARAMS",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARRAYPARAMS ::= 
            {
              node RESULT =null;
		RESULT = new node("non_array_variable");
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARRAYPARAMS",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARRAYPARAMS ::= sbracketizq numero sbracketder 
            {
              node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = new node(n, nright+1, nleft);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARRAYPARAMS",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARRAYPARAMS ::= sbracketizq sbracketder 
            {
              node RESULT =null;
		RESULT = new node("variable_size");
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARRAYPARAMS",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= error 
            {
              node RESULT =null;
		 RESULT = new node("Declaración de variable inválida."); System.out.println("Declaración de variable inválida. "); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION ::= RETURNTYPES iden ARRAYPARAMS assign ARRAYVAL coma 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		node t = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		node ap = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node av = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 node nodo = new node("declaracion", idright+1, idleft);
                                                                        nodo.children.add(new node(t.sym + ",array", tright+1, tleft));
                                                                        nodo.children.add(new node(id, idright+1, idleft));  
                                                                        nodo.children.add(ap);  
                                                                        av.type = t.sym + ",array";
                                                                        nodo.children.add(av);
                                                                        RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= RETURNTYPES iden ARRAYPARAMS assign stringval coma 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		node t = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		node ap = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 node nodo = new node("declaracion", idright+1, idleft);
                                                                        nodo.children.add(new node(t.sym, tright+1, tleft, 255));
                                                                        nodo.children.add(new node(id, idright+1, idleft));
                                                                        nodo.children.add(ap);                                                                                                                                                
                                                                        nodo.children.add(new node(v, vright+1, vleft, "string"));
                                                                        nodo.type = t.sym;
                                                                        RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= RETURNTYPES iden ARRAYPARAMS assign floatval coma 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		node t = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		node ap = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 node nodo = new node("declaracion", idright+1, idleft);
                                                                        nodo.children.add(new node(t.sym, tright+1, tleft, 4));
                                                                        nodo.children.add(new node(id, idright+1, idleft));    
                                                                        nodo.children.add(ap);                                                                                                                                            
                                                                        nodo.children.add(new node(v, vright+1, vleft, "float"));
                                                                        nodo.type =  t.sym;
                                                                        RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= RETURNTYPES iden ARRAYPARAMS assign numero coma 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		node t = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		node ap = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 node nodo = new node("declaracion", idright+1, idleft);
                                                                        nodo.children.add(new node(t.sym, tright+1, tleft, 4));
                                                                        nodo.children.add(new node(id, idright+1, idleft)); 
                                                                        nodo.children.add(ap);                                                                                                                                               
                                                                        nodo.children.add(new node(v, vright+1, vleft, "int"));
                                                                        nodo.type =  t.sym;
                                                                        RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= RETURNTYPES iden ARRAYPARAMS assign characterval coma 
            {
              node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		node t = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		node ap = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 node nodo = new node("declaracion", idright+1, idleft);
                                                                        nodo.children.add(new node(t.sym, tright+1, tleft, 2));
                                                                        nodo.children.add(new node(id, idright+1, idleft));
                                                                        nodo.children.add(ap);  
                                                                        nodo.children.add(new node(v, vright+1, vleft, "char"));
                                                                        nodo.type =  t.sym;
                                                                        RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES ::= DECLARACIONES DECLARACION 
            {
              node RESULT =null;
		int osleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node os = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node o = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		os.children.add(o);
                                                RESULT = os; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",28, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES ::= DECLARACION 
            {
              node RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node o = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node("declaraciones");                                                  
                                                  nodo.children.add(o);
                                                  RESULT = nodo; 
                                                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",28, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STARTVOODOO ::= DECLARACIONES 
            {
              node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node d = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node("program");
                                                                                //nodo.children.add(new node(sv, svright+1, svleft));
                                                                                //nodo.children.add(new node(id, idright+1, idleft));
                                                                                nodo.children.add(d);                                                                                
                                                                                //nodo.children.add(r);
                                                                                //nodo.children.add(ev);
                                                                                RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("STARTVOODOO",26, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STARTVOODOO ::= SPELLS 
            {
              node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node s = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node("program");
                                                                                //nodo.children.add(new node(sv, svright+1, svleft));
                                                                               // nodo.children.add(new node(id, idright+1, idleft));                                                                                
                                                                                nodo.children.add(s);
                                                                                //nodo.children.add(r);
                                                                                //nodo.children.add(ev);
                                                                                RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("STARTVOODOO",26, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // STARTVOODOO ::= DECLARACIONES SPELLS 
            {
              node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node d = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node s = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 node nodo = new node("program");
                                                        
                                                                                //nodo.children.add(new node(sv, svright+1, svleft));
                                                                               // nodo.children.add(new node(id, idright+1, idleft));
                                                                                nodo.children.add(d);
                                                                                nodo.children.add(s);
                                                                                //nodo.children.add(r);
                                                                                //nodo.children.add(ev);
                                                                                RESULT = nodo;  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("STARTVOODOO",26, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIA ::= STARTVOODOO 
            {
              node RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		node sp = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		  
                                  
                                    parser.setPadre(sp);
                            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		node start_val = (node)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

